// source: ucfg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sonarsource.ucfg.AssignCall', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignCall.TargetCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignDynamicCall', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignDynamicCall.MethodreferenceCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignDynamicCall.TargetCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignVirtualCall', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.AssignVirtualCall.TargetCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.BasicBlock', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.BasicBlock.TerminatorCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.ClassName', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Constant', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Expression', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Expression.ExprCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.FieldAccess', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.FieldAccess.ExprObjCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Instruction', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Instruction.InstrCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.IntLiteral', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Iter', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Jump', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.KeywordArgument', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Last', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Location', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.NewObject', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.NewObject.TargetCase', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Return', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.This', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.UCFG', null, global);
goog.exportSymbol('proto.sonarsource.ucfg.Variable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.UCFG = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.UCFG.repeatedFields_, null);
};
goog.inherits(proto.sonarsource.ucfg.UCFG, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.UCFG.displayName = 'proto.sonarsource.ucfg.UCFG';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.BasicBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.BasicBlock.repeatedFields_, proto.sonarsource.ucfg.BasicBlock.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.BasicBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.BasicBlock.displayName = 'proto.sonarsource.ucfg.BasicBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Instruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sonarsource.ucfg.Instruction.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.Instruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Instruction.displayName = 'proto.sonarsource.ucfg.Instruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.AssignCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.AssignCall.repeatedFields_, proto.sonarsource.ucfg.AssignCall.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.AssignCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.AssignCall.displayName = 'proto.sonarsource.ucfg.AssignCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.AssignVirtualCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.AssignVirtualCall.repeatedFields_, proto.sonarsource.ucfg.AssignVirtualCall.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.AssignVirtualCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.AssignVirtualCall.displayName = 'proto.sonarsource.ucfg.AssignVirtualCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.AssignDynamicCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.AssignDynamicCall.repeatedFields_, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.AssignDynamicCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.AssignDynamicCall.displayName = 'proto.sonarsource.ucfg.AssignDynamicCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.NewObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sonarsource.ucfg.NewObject.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.NewObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.NewObject.displayName = 'proto.sonarsource.ucfg.NewObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Return = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Return, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Return.displayName = 'proto.sonarsource.ucfg.Return';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Jump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sonarsource.ucfg.Jump.repeatedFields_, null);
};
goog.inherits(proto.sonarsource.ucfg.Jump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Jump.displayName = 'proto.sonarsource.ucfg.Jump';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.KeywordArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.KeywordArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.KeywordArgument.displayName = 'proto.sonarsource.ucfg.KeywordArgument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sonarsource.ucfg.Expression.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Expression.displayName = 'proto.sonarsource.ucfg.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Variable.displayName = 'proto.sonarsource.ucfg.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Constant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Constant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Constant.displayName = 'proto.sonarsource.ucfg.Constant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.IntLiteral = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.IntLiteral, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.IntLiteral.displayName = 'proto.sonarsource.ucfg.IntLiteral';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Last = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Last, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Last.displayName = 'proto.sonarsource.ucfg.Last';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Iter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Iter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Iter.displayName = 'proto.sonarsource.ucfg.Iter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.This = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.This, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.This.displayName = 'proto.sonarsource.ucfg.This';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.ClassName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.ClassName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.ClassName.displayName = 'proto.sonarsource.ucfg.ClassName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.FieldAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sonarsource.ucfg.FieldAccess.oneofGroups_);
};
goog.inherits(proto.sonarsource.ucfg.FieldAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.FieldAccess.displayName = 'proto.sonarsource.ucfg.FieldAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sonarsource.ucfg.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sonarsource.ucfg.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sonarsource.ucfg.Location.displayName = 'proto.sonarsource.ucfg.Location';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.UCFG.repeatedFields_ = [3,4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.UCFG.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.UCFG.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.UCFG} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.UCFG.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    parametersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    entriesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    basicBlocksList: jspb.Message.toObjectList(msg.getBasicBlocksList(),
    proto.sonarsource.ucfg.BasicBlock.toObject, includeInstance),
    parametersWithTypesList: jspb.Message.toObjectList(msg.getParametersWithTypesList(),
    proto.sonarsource.ucfg.Variable.toObject, includeInstance),
    thisVar: (f = msg.getThisVar()) && proto.sonarsource.ucfg.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.UCFG}
 */
proto.sonarsource.ucfg.UCFG.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.UCFG;
  return proto.sonarsource.ucfg.UCFG.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.UCFG} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.UCFG}
 */
proto.sonarsource.ucfg.UCFG.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodId(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addParameters(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntries(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.BasicBlock;
      reader.readMessage(value,proto.sonarsource.ucfg.BasicBlock.deserializeBinaryFromReader);
      msg.addBasicBlocks(value);
      break;
    case 7:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.addParametersWithTypes(value);
      break;
    case 8:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.setThisVar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.UCFG.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.UCFG.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.UCFG} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.UCFG.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getBasicBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sonarsource.ucfg.BasicBlock.serializeBinaryToWriter
    );
  }
  f = message.getParametersWithTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getThisVar();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string method_id = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.UCFG.prototype.getMethodId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.setMethodId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Location location = 2;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.UCFG.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
*/
proto.sonarsource.ucfg.UCFG.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.UCFG.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string parameters = 3;
 * @return {!Array<string>}
 */
proto.sonarsource.ucfg.UCFG.prototype.getParametersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.setParametersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.addParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};


/**
 * repeated string entries = 4;
 * @return {!Array<string>}
 */
proto.sonarsource.ucfg.UCFG.prototype.getEntriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.setEntriesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.addEntries = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};


/**
 * repeated BasicBlock basic_blocks = 5;
 * @return {!Array<!proto.sonarsource.ucfg.BasicBlock>}
 */
proto.sonarsource.ucfg.UCFG.prototype.getBasicBlocksList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.BasicBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.BasicBlock, 5));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.BasicBlock>} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
*/
proto.sonarsource.ucfg.UCFG.prototype.setBasicBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sonarsource.ucfg.BasicBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.BasicBlock}
 */
proto.sonarsource.ucfg.UCFG.prototype.addBasicBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sonarsource.ucfg.BasicBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearBasicBlocksList = function() {
  return this.setBasicBlocksList([]);
};


/**
 * repeated Variable parameters_with_types = 7;
 * @return {!Array<!proto.sonarsource.ucfg.Variable>}
 */
proto.sonarsource.ucfg.UCFG.prototype.getParametersWithTypesList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.Variable, 7));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.Variable>} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
*/
proto.sonarsource.ucfg.UCFG.prototype.setParametersWithTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sonarsource.ucfg.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.UCFG.prototype.addParametersWithTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sonarsource.ucfg.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearParametersWithTypesList = function() {
  return this.setParametersWithTypesList([]);
};


/**
 * optional Expression this_var = 8;
 * @return {?proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.UCFG.prototype.getThisVar = function() {
  return /** @type{?proto.sonarsource.ucfg.Expression} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Expression, 8));
};


/**
 * @param {?proto.sonarsource.ucfg.Expression|undefined} value
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
*/
proto.sonarsource.ucfg.UCFG.prototype.setThisVar = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.UCFG} returns this
 */
proto.sonarsource.ucfg.UCFG.prototype.clearThisVar = function() {
  return this.setThisVar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.UCFG.prototype.hasThisVar = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.BasicBlock.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.BasicBlock.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.BasicBlock.TerminatorCase = {
  TERMINATOR_NOT_SET: 0,
  RET: 4,
  JUMP: 5
};

/**
 * @return {proto.sonarsource.ucfg.BasicBlock.TerminatorCase}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getTerminatorCase = function() {
  return /** @type {proto.sonarsource.ucfg.BasicBlock.TerminatorCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.BasicBlock.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.BasicBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.BasicBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.BasicBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    instructionsList: jspb.Message.toObjectList(msg.getInstructionsList(),
    proto.sonarsource.ucfg.Instruction.toObject, includeInstance),
    ret: (f = msg.getRet()) && proto.sonarsource.ucfg.Return.toObject(includeInstance, f),
    jump: (f = msg.getJump()) && proto.sonarsource.ucfg.Jump.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.BasicBlock}
 */
proto.sonarsource.ucfg.BasicBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.BasicBlock;
  return proto.sonarsource.ucfg.BasicBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.BasicBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.BasicBlock}
 */
proto.sonarsource.ucfg.BasicBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.Instruction;
      reader.readMessage(value,proto.sonarsource.ucfg.Instruction.deserializeBinaryFromReader);
      msg.addInstructions(value);
      break;
    case 4:
      var value = new proto.sonarsource.ucfg.Return;
      reader.readMessage(value,proto.sonarsource.ucfg.Return.deserializeBinaryFromReader);
      msg.setRet(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.Jump;
      reader.readMessage(value,proto.sonarsource.ucfg.Jump.deserializeBinaryFromReader);
      msg.setJump(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.BasicBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.BasicBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.BasicBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sonarsource.ucfg.Instruction.serializeBinaryToWriter
    );
  }
  f = message.getRet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sonarsource.ucfg.Return.serializeBinaryToWriter
    );
  }
  f = message.getJump();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sonarsource.ucfg.Jump.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
 */
proto.sonarsource.ucfg.BasicBlock.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Location location = 2;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
*/
proto.sonarsource.ucfg.BasicBlock.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
 */
proto.sonarsource.ucfg.BasicBlock.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Instruction instructions = 3;
 * @return {!Array<!proto.sonarsource.ucfg.Instruction>}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getInstructionsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.Instruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.Instruction, 3));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.Instruction>} value
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
*/
proto.sonarsource.ucfg.BasicBlock.prototype.setInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sonarsource.ucfg.Instruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Instruction}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.addInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sonarsource.ucfg.Instruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
 */
proto.sonarsource.ucfg.BasicBlock.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};


/**
 * optional Return ret = 4;
 * @return {?proto.sonarsource.ucfg.Return}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getRet = function() {
  return /** @type{?proto.sonarsource.ucfg.Return} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Return, 4));
};


/**
 * @param {?proto.sonarsource.ucfg.Return|undefined} value
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
*/
proto.sonarsource.ucfg.BasicBlock.prototype.setRet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sonarsource.ucfg.BasicBlock.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
 */
proto.sonarsource.ucfg.BasicBlock.prototype.clearRet = function() {
  return this.setRet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.hasRet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Jump jump = 5;
 * @return {?proto.sonarsource.ucfg.Jump}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.getJump = function() {
  return /** @type{?proto.sonarsource.ucfg.Jump} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Jump, 5));
};


/**
 * @param {?proto.sonarsource.ucfg.Jump|undefined} value
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
*/
proto.sonarsource.ucfg.BasicBlock.prototype.setJump = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sonarsource.ucfg.BasicBlock.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.BasicBlock} returns this
 */
proto.sonarsource.ucfg.BasicBlock.prototype.clearJump = function() {
  return this.setJump(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.BasicBlock.prototype.hasJump = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.Instruction.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.Instruction.InstrCase = {
  INSTR_NOT_SET: 0,
  ASSIGN_CALL: 1,
  NEW_OBJECT: 2,
  ASSIGN_V_CALL: 3,
  ASSIGN_D_CALL: 4
};

/**
 * @return {proto.sonarsource.ucfg.Instruction.InstrCase}
 */
proto.sonarsource.ucfg.Instruction.prototype.getInstrCase = function() {
  return /** @type {proto.sonarsource.ucfg.Instruction.InstrCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.Instruction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Instruction.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Instruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Instruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Instruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignCall: (f = msg.getAssignCall()) && proto.sonarsource.ucfg.AssignCall.toObject(includeInstance, f),
    newObject: (f = msg.getNewObject()) && proto.sonarsource.ucfg.NewObject.toObject(includeInstance, f),
    assignVCall: (f = msg.getAssignVCall()) && proto.sonarsource.ucfg.AssignVirtualCall.toObject(includeInstance, f),
    assignDCall: (f = msg.getAssignDCall()) && proto.sonarsource.ucfg.AssignDynamicCall.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Instruction}
 */
proto.sonarsource.ucfg.Instruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Instruction;
  return proto.sonarsource.ucfg.Instruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Instruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Instruction}
 */
proto.sonarsource.ucfg.Instruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.AssignCall;
      reader.readMessage(value,proto.sonarsource.ucfg.AssignCall.deserializeBinaryFromReader);
      msg.setAssignCall(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.NewObject;
      reader.readMessage(value,proto.sonarsource.ucfg.NewObject.deserializeBinaryFromReader);
      msg.setNewObject(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.AssignVirtualCall;
      reader.readMessage(value,proto.sonarsource.ucfg.AssignVirtualCall.deserializeBinaryFromReader);
      msg.setAssignVCall(value);
      break;
    case 4:
      var value = new proto.sonarsource.ucfg.AssignDynamicCall;
      reader.readMessage(value,proto.sonarsource.ucfg.AssignDynamicCall.deserializeBinaryFromReader);
      msg.setAssignDCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Instruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Instruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Instruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Instruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignCall();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.AssignCall.serializeBinaryToWriter
    );
  }
  f = message.getNewObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.NewObject.serializeBinaryToWriter
    );
  }
  f = message.getAssignVCall();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.AssignVirtualCall.serializeBinaryToWriter
    );
  }
  f = message.getAssignDCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sonarsource.ucfg.AssignDynamicCall.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssignCall assign_call = 1;
 * @return {?proto.sonarsource.ucfg.AssignCall}
 */
proto.sonarsource.ucfg.Instruction.prototype.getAssignCall = function() {
  return /** @type{?proto.sonarsource.ucfg.AssignCall} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.AssignCall, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.AssignCall|undefined} value
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
*/
proto.sonarsource.ucfg.Instruction.prototype.setAssignCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sonarsource.ucfg.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
 */
proto.sonarsource.ucfg.Instruction.prototype.clearAssignCall = function() {
  return this.setAssignCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Instruction.prototype.hasAssignCall = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NewObject new_object = 2;
 * @return {?proto.sonarsource.ucfg.NewObject}
 */
proto.sonarsource.ucfg.Instruction.prototype.getNewObject = function() {
  return /** @type{?proto.sonarsource.ucfg.NewObject} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.NewObject, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.NewObject|undefined} value
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
*/
proto.sonarsource.ucfg.Instruction.prototype.setNewObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
 */
proto.sonarsource.ucfg.Instruction.prototype.clearNewObject = function() {
  return this.setNewObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Instruction.prototype.hasNewObject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssignVirtualCall assign_v_call = 3;
 * @return {?proto.sonarsource.ucfg.AssignVirtualCall}
 */
proto.sonarsource.ucfg.Instruction.prototype.getAssignVCall = function() {
  return /** @type{?proto.sonarsource.ucfg.AssignVirtualCall} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.AssignVirtualCall, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.AssignVirtualCall|undefined} value
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
*/
proto.sonarsource.ucfg.Instruction.prototype.setAssignVCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
 */
proto.sonarsource.ucfg.Instruction.prototype.clearAssignVCall = function() {
  return this.setAssignVCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Instruction.prototype.hasAssignVCall = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AssignDynamicCall assign_d_call = 4;
 * @return {?proto.sonarsource.ucfg.AssignDynamicCall}
 */
proto.sonarsource.ucfg.Instruction.prototype.getAssignDCall = function() {
  return /** @type{?proto.sonarsource.ucfg.AssignDynamicCall} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.AssignDynamicCall, 4));
};


/**
 * @param {?proto.sonarsource.ucfg.AssignDynamicCall|undefined} value
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
*/
proto.sonarsource.ucfg.Instruction.prototype.setAssignDCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sonarsource.ucfg.Instruction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Instruction} returns this
 */
proto.sonarsource.ucfg.Instruction.prototype.clearAssignDCall = function() {
  return this.setAssignDCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Instruction.prototype.hasAssignDCall = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.AssignCall.repeatedFields_ = [5,6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.AssignCall.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.AssignCall.TargetCase = {
  TARGET_NOT_SET: 0,
  VARIABLE: 2,
  FIELD_ACCESS: 3
};

/**
 * @return {proto.sonarsource.ucfg.AssignCall.TargetCase}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getTargetCase = function() {
  return /** @type {proto.sonarsource.ucfg.AssignCall.TargetCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.AssignCall.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.AssignCall.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.AssignCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.AssignCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    fieldAccess: (f = msg.getFieldAccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    methodid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.sonarsource.ucfg.Expression.toObject, includeInstance),
    keywordargumentsList: jspb.Message.toObjectList(msg.getKeywordargumentsList(),
    proto.sonarsource.ucfg.KeywordArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.AssignCall}
 */
proto.sonarsource.ucfg.AssignCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.AssignCall;
  return proto.sonarsource.ucfg.AssignCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.AssignCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.AssignCall}
 */
proto.sonarsource.ucfg.AssignCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setFieldAccess(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodid(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 6:
      var value = new proto.sonarsource.ucfg.KeywordArgument;
      reader.readMessage(value,proto.sonarsource.ucfg.KeywordArgument.deserializeBinaryFromReader);
      msg.addKeywordarguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.AssignCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.AssignCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.AssignCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getFieldAccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getMethodid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
  f = message.getKeywordargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.sonarsource.ucfg.KeywordArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
*/
proto.sonarsource.ucfg.AssignCall.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignCall.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Variable variable = 2;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getVariable = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
*/
proto.sonarsource.ucfg.AssignCall.prototype.setVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.AssignCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignCall.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FieldAccess field_access = 3;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getFieldAccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
*/
proto.sonarsource.ucfg.AssignCall.prototype.setFieldAccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.AssignCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.clearFieldAccess = function() {
  return this.setFieldAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignCall.prototype.hasFieldAccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string methodId = 4;
 * @return {string}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getMethodid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.setMethodid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Expression args = 5;
 * @return {!Array<!proto.sonarsource.ucfg.Expression>}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.Expression, 5));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.Expression>} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
*/
proto.sonarsource.ucfg.AssignCall.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sonarsource.ucfg.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.AssignCall.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sonarsource.ucfg.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * repeated KeywordArgument keywordArguments = 6;
 * @return {!Array<!proto.sonarsource.ucfg.KeywordArgument>}
 */
proto.sonarsource.ucfg.AssignCall.prototype.getKeywordargumentsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.KeywordArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.KeywordArgument, 6));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.KeywordArgument>} value
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
*/
proto.sonarsource.ucfg.AssignCall.prototype.setKeywordargumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.sonarsource.ucfg.KeywordArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.KeywordArgument}
 */
proto.sonarsource.ucfg.AssignCall.prototype.addKeywordarguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.sonarsource.ucfg.KeywordArgument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignCall} returns this
 */
proto.sonarsource.ucfg.AssignCall.prototype.clearKeywordargumentsList = function() {
  return this.setKeywordargumentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.AssignVirtualCall.repeatedFields_ = [5,7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.AssignVirtualCall.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.AssignVirtualCall.TargetCase = {
  TARGET_NOT_SET: 0,
  VARIABLE: 2,
  FIELD_ACCESS: 3
};

/**
 * @return {proto.sonarsource.ucfg.AssignVirtualCall.TargetCase}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getTargetCase = function() {
  return /** @type {proto.sonarsource.ucfg.AssignVirtualCall.TargetCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.AssignVirtualCall.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.AssignVirtualCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.AssignVirtualCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignVirtualCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    fieldAccess: (f = msg.getFieldAccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    methodid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.sonarsource.ucfg.Expression.toObject, includeInstance),
    methodName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    keywordargumentsList: jspb.Message.toObjectList(msg.getKeywordargumentsList(),
    proto.sonarsource.ucfg.KeywordArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall}
 */
proto.sonarsource.ucfg.AssignVirtualCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.AssignVirtualCall;
  return proto.sonarsource.ucfg.AssignVirtualCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.AssignVirtualCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall}
 */
proto.sonarsource.ucfg.AssignVirtualCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setFieldAccess(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodid(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 7:
      var value = new proto.sonarsource.ucfg.KeywordArgument;
      reader.readMessage(value,proto.sonarsource.ucfg.KeywordArgument.deserializeBinaryFromReader);
      msg.addKeywordarguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.AssignVirtualCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.AssignVirtualCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignVirtualCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getFieldAccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getMethodid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getKeywordargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sonarsource.ucfg.KeywordArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
*/
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Variable variable = 2;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getVariable = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
*/
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.AssignVirtualCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FieldAccess field_access = 3;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getFieldAccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
*/
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setFieldAccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.AssignVirtualCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.clearFieldAccess = function() {
  return this.setFieldAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.hasFieldAccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string methodId = 4;
 * @return {string}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getMethodid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setMethodid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Expression args = 5;
 * @return {!Array<!proto.sonarsource.ucfg.Expression>}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.Expression, 5));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.Expression>} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
*/
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sonarsource.ucfg.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sonarsource.ucfg.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional string method_name = 6;
 * @return {string}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setMethodName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated KeywordArgument keywordArguments = 7;
 * @return {!Array<!proto.sonarsource.ucfg.KeywordArgument>}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.getKeywordargumentsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.KeywordArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.KeywordArgument, 7));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.KeywordArgument>} value
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
*/
proto.sonarsource.ucfg.AssignVirtualCall.prototype.setKeywordargumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sonarsource.ucfg.KeywordArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.KeywordArgument}
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.addKeywordarguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sonarsource.ucfg.KeywordArgument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignVirtualCall} returns this
 */
proto.sonarsource.ucfg.AssignVirtualCall.prototype.clearKeywordargumentsList = function() {
  return this.setKeywordargumentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.AssignDynamicCall.repeatedFields_ = [6,7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_ = [[2,3],[4,5]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.AssignDynamicCall.TargetCase = {
  TARGET_NOT_SET: 0,
  VARIABLE: 2,
  FIELD_ACCESS: 3
};

/**
 * @return {proto.sonarsource.ucfg.AssignDynamicCall.TargetCase}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getTargetCase = function() {
  return /** @type {proto.sonarsource.ucfg.AssignDynamicCall.TargetCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.AssignDynamicCall.MethodreferenceCase = {
  METHODREFERENCE_NOT_SET: 0,
  METHODREFERENCEVARIABLE: 4,
  METHODREFERENCEFIELDACCESS: 5
};

/**
 * @return {proto.sonarsource.ucfg.AssignDynamicCall.MethodreferenceCase}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getMethodreferenceCase = function() {
  return /** @type {proto.sonarsource.ucfg.AssignDynamicCall.MethodreferenceCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.AssignDynamicCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.AssignDynamicCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignDynamicCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    fieldAccess: (f = msg.getFieldAccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    methodreferencevariable: (f = msg.getMethodreferencevariable()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    methodreferencefieldaccess: (f = msg.getMethodreferencefieldaccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.sonarsource.ucfg.Expression.toObject, includeInstance),
    keywordargumentsList: jspb.Message.toObjectList(msg.getKeywordargumentsList(),
    proto.sonarsource.ucfg.KeywordArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall}
 */
proto.sonarsource.ucfg.AssignDynamicCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.AssignDynamicCall;
  return proto.sonarsource.ucfg.AssignDynamicCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.AssignDynamicCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall}
 */
proto.sonarsource.ucfg.AssignDynamicCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setFieldAccess(value);
      break;
    case 4:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setMethodreferencevariable(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setMethodreferencefieldaccess(value);
      break;
    case 6:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 7:
      var value = new proto.sonarsource.ucfg.KeywordArgument;
      reader.readMessage(value,proto.sonarsource.ucfg.KeywordArgument.deserializeBinaryFromReader);
      msg.addKeywordarguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.AssignDynamicCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.AssignDynamicCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.AssignDynamicCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getFieldAccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getMethodreferencevariable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getMethodreferencefieldaccess();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
  f = message.getKeywordargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sonarsource.ucfg.KeywordArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Variable variable = 2;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getVariable = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FieldAccess field_access = 3;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getFieldAccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setFieldAccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearFieldAccess = function() {
  return this.setFieldAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.hasFieldAccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Variable methodReferenceVariable = 4;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getMethodreferencevariable = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 4));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setMethodreferencevariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearMethodreferencevariable = function() {
  return this.setMethodreferencevariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.hasMethodreferencevariable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FieldAccess methodReferenceFieldAccess = 5;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getMethodreferencefieldaccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 5));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setMethodreferencefieldaccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sonarsource.ucfg.AssignDynamicCall.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearMethodreferencefieldaccess = function() {
  return this.setMethodreferencefieldaccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.hasMethodreferencefieldaccess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Expression args = 6;
 * @return {!Array<!proto.sonarsource.ucfg.Expression>}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.Expression, 6));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.Expression>} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.sonarsource.ucfg.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.sonarsource.ucfg.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * repeated KeywordArgument keywordArguments = 7;
 * @return {!Array<!proto.sonarsource.ucfg.KeywordArgument>}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.getKeywordargumentsList = function() {
  return /** @type{!Array<!proto.sonarsource.ucfg.KeywordArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sonarsource.ucfg.KeywordArgument, 7));
};


/**
 * @param {!Array<!proto.sonarsource.ucfg.KeywordArgument>} value
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
*/
proto.sonarsource.ucfg.AssignDynamicCall.prototype.setKeywordargumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sonarsource.ucfg.KeywordArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.KeywordArgument}
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.addKeywordarguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sonarsource.ucfg.KeywordArgument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.AssignDynamicCall} returns this
 */
proto.sonarsource.ucfg.AssignDynamicCall.prototype.clearKeywordargumentsList = function() {
  return this.setKeywordargumentsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.NewObject.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.NewObject.TargetCase = {
  TARGET_NOT_SET: 0,
  VARIABLE: 2,
  FIELD_ACCESS: 3
};

/**
 * @return {proto.sonarsource.ucfg.NewObject.TargetCase}
 */
proto.sonarsource.ucfg.NewObject.prototype.getTargetCase = function() {
  return /** @type {proto.sonarsource.ucfg.NewObject.TargetCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.NewObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.NewObject.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.NewObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.NewObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.NewObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    fieldAccess: (f = msg.getFieldAccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.NewObject}
 */
proto.sonarsource.ucfg.NewObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.NewObject;
  return proto.sonarsource.ucfg.NewObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.NewObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.NewObject}
 */
proto.sonarsource.ucfg.NewObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setFieldAccess(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.NewObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.NewObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.NewObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.NewObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getFieldAccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.NewObject.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
*/
proto.sonarsource.ucfg.NewObject.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
 */
proto.sonarsource.ucfg.NewObject.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.NewObject.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Variable variable = 2;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.NewObject.prototype.getVariable = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
*/
proto.sonarsource.ucfg.NewObject.prototype.setVariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.NewObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
 */
proto.sonarsource.ucfg.NewObject.prototype.clearVariable = function() {
  return this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.NewObject.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FieldAccess field_access = 3;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.NewObject.prototype.getFieldAccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
*/
proto.sonarsource.ucfg.NewObject.prototype.setFieldAccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.NewObject.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
 */
proto.sonarsource.ucfg.NewObject.prototype.clearFieldAccess = function() {
  return this.setFieldAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.NewObject.prototype.hasFieldAccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.sonarsource.ucfg.NewObject.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.NewObject} returns this
 */
proto.sonarsource.ucfg.NewObject.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Return.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Return.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Return} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Return.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.sonarsource.ucfg.Location.toObject(includeInstance, f),
    returnedExpression: (f = msg.getReturnedExpression()) && proto.sonarsource.ucfg.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Return}
 */
proto.sonarsource.ucfg.Return.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Return;
  return proto.sonarsource.ucfg.Return.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Return} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Return}
 */
proto.sonarsource.ucfg.Return.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Location;
      reader.readMessage(value,proto.sonarsource.ucfg.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.setReturnedExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Return.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Return.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Return} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Return.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Location.serializeBinaryToWriter
    );
  }
  f = message.getReturnedExpression();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.Return.prototype.getLocation = function() {
  return /** @type{?proto.sonarsource.ucfg.Location} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Location, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Location|undefined} value
 * @return {!proto.sonarsource.ucfg.Return} returns this
*/
proto.sonarsource.ucfg.Return.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Return} returns this
 */
proto.sonarsource.ucfg.Return.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Return.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression returned_expression = 2;
 * @return {?proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.Return.prototype.getReturnedExpression = function() {
  return /** @type{?proto.sonarsource.ucfg.Expression} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Expression, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Expression|undefined} value
 * @return {!proto.sonarsource.ucfg.Return} returns this
*/
proto.sonarsource.ucfg.Return.prototype.setReturnedExpression = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Return} returns this
 */
proto.sonarsource.ucfg.Return.prototype.clearReturnedExpression = function() {
  return this.setReturnedExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Return.prototype.hasReturnedExpression = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sonarsource.ucfg.Jump.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Jump.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Jump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Jump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Jump.toObject = function(includeInstance, msg) {
  var f, obj = {
    destinationsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Jump}
 */
proto.sonarsource.ucfg.Jump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Jump;
  return proto.sonarsource.ucfg.Jump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Jump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Jump}
 */
proto.sonarsource.ucfg.Jump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDestinations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Jump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Jump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Jump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Jump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestinationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string destinations = 1;
 * @return {!Array<string>}
 */
proto.sonarsource.ucfg.Jump.prototype.getDestinationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sonarsource.ucfg.Jump} returns this
 */
proto.sonarsource.ucfg.Jump.prototype.setDestinationsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sonarsource.ucfg.Jump} returns this
 */
proto.sonarsource.ucfg.Jump.prototype.addDestinations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sonarsource.ucfg.Jump} returns this
 */
proto.sonarsource.ucfg.Jump.prototype.clearDestinationsList = function() {
  return this.setDestinationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.KeywordArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.KeywordArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.KeywordArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.sonarsource.ucfg.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.KeywordArgument}
 */
proto.sonarsource.ucfg.KeywordArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.KeywordArgument;
  return proto.sonarsource.ucfg.KeywordArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.KeywordArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.KeywordArgument}
 */
proto.sonarsource.ucfg.KeywordArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyword(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Expression;
      reader.readMessage(value,proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.KeywordArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.KeywordArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.KeywordArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string keyword = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.getKeyword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.KeywordArgument} returns this
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.setKeyword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Expression value = 2;
 * @return {?proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.getValue = function() {
  return /** @type{?proto.sonarsource.ucfg.Expression} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Expression, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Expression|undefined} value
 * @return {!proto.sonarsource.ucfg.KeywordArgument} returns this
*/
proto.sonarsource.ucfg.KeywordArgument.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.KeywordArgument} returns this
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.KeywordArgument.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.Expression.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.Expression.ExprCase = {
  EXPR_NOT_SET: 0,
  VAR: 1,
  CONST: 2,
  THIS: 3,
  CLASS_NAME: 4,
  FIELD_ACCESS: 5,
  INT_LITERAL: 6,
  LAST: 7,
  ITER: 8
};

/**
 * @return {proto.sonarsource.ucfg.Expression.ExprCase}
 */
proto.sonarsource.ucfg.Expression.prototype.getExprCase = function() {
  return /** @type {proto.sonarsource.ucfg.Expression.ExprCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_var: (f = msg.getVar()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    pb_const: (f = msg.getConst()) && proto.sonarsource.ucfg.Constant.toObject(includeInstance, f),
    pb_this: (f = msg.getThis()) && proto.sonarsource.ucfg.This.toObject(includeInstance, f),
    className: (f = msg.getClassName()) && proto.sonarsource.ucfg.ClassName.toObject(includeInstance, f),
    fieldAccess: (f = msg.getFieldAccess()) && proto.sonarsource.ucfg.FieldAccess.toObject(includeInstance, f),
    intLiteral: (f = msg.getIntLiteral()) && proto.sonarsource.ucfg.IntLiteral.toObject(includeInstance, f),
    last: (f = msg.getLast()) && proto.sonarsource.ucfg.Last.toObject(includeInstance, f),
    iter: (f = msg.getIter()) && proto.sonarsource.ucfg.Iter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Expression;
  return proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Expression}
 */
proto.sonarsource.ucfg.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setVar(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.Constant;
      reader.readMessage(value,proto.sonarsource.ucfg.Constant.deserializeBinaryFromReader);
      msg.setConst(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.This;
      reader.readMessage(value,proto.sonarsource.ucfg.This.deserializeBinaryFromReader);
      msg.setThis(value);
      break;
    case 4:
      var value = new proto.sonarsource.ucfg.ClassName;
      reader.readMessage(value,proto.sonarsource.ucfg.ClassName.deserializeBinaryFromReader);
      msg.setClassName(value);
      break;
    case 5:
      var value = new proto.sonarsource.ucfg.FieldAccess;
      reader.readMessage(value,proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader);
      msg.setFieldAccess(value);
      break;
    case 6:
      var value = new proto.sonarsource.ucfg.IntLiteral;
      reader.readMessage(value,proto.sonarsource.ucfg.IntLiteral.deserializeBinaryFromReader);
      msg.setIntLiteral(value);
      break;
    case 7:
      var value = new proto.sonarsource.ucfg.Last;
      reader.readMessage(value,proto.sonarsource.ucfg.Last.deserializeBinaryFromReader);
      msg.setLast(value);
      break;
    case 8:
      var value = new proto.sonarsource.ucfg.Iter;
      reader.readMessage(value,proto.sonarsource.ucfg.Iter.deserializeBinaryFromReader);
      msg.setIter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getConst();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.Constant.serializeBinaryToWriter
    );
  }
  f = message.getThis();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.This.serializeBinaryToWriter
    );
  }
  f = message.getClassName();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sonarsource.ucfg.ClassName.serializeBinaryToWriter
    );
  }
  f = message.getFieldAccess();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter
    );
  }
  f = message.getIntLiteral();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sonarsource.ucfg.IntLiteral.serializeBinaryToWriter
    );
  }
  f = message.getLast();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sonarsource.ucfg.Last.serializeBinaryToWriter
    );
  }
  f = message.getIter();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sonarsource.ucfg.Iter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable var = 1;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.Expression.prototype.getVar = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setVar = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearVar = function() {
  return this.setVar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasVar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Constant const = 2;
 * @return {?proto.sonarsource.ucfg.Constant}
 */
proto.sonarsource.ucfg.Expression.prototype.getConst = function() {
  return /** @type{?proto.sonarsource.ucfg.Constant} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Constant, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.Constant|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setConst = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearConst = function() {
  return this.setConst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasConst = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional This this = 3;
 * @return {?proto.sonarsource.ucfg.This}
 */
proto.sonarsource.ucfg.Expression.prototype.getThis = function() {
  return /** @type{?proto.sonarsource.ucfg.This} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.This, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.This|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setThis = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearThis = function() {
  return this.setThis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasThis = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ClassName class_name = 4;
 * @return {?proto.sonarsource.ucfg.ClassName}
 */
proto.sonarsource.ucfg.Expression.prototype.getClassName = function() {
  return /** @type{?proto.sonarsource.ucfg.ClassName} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.ClassName, 4));
};


/**
 * @param {?proto.sonarsource.ucfg.ClassName|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setClassName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearClassName = function() {
  return this.setClassName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasClassName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FieldAccess field_access = 5;
 * @return {?proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.Expression.prototype.getFieldAccess = function() {
  return /** @type{?proto.sonarsource.ucfg.FieldAccess} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.FieldAccess, 5));
};


/**
 * @param {?proto.sonarsource.ucfg.FieldAccess|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setFieldAccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearFieldAccess = function() {
  return this.setFieldAccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasFieldAccess = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IntLiteral int_literal = 6;
 * @return {?proto.sonarsource.ucfg.IntLiteral}
 */
proto.sonarsource.ucfg.Expression.prototype.getIntLiteral = function() {
  return /** @type{?proto.sonarsource.ucfg.IntLiteral} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.IntLiteral, 6));
};


/**
 * @param {?proto.sonarsource.ucfg.IntLiteral|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setIntLiteral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearIntLiteral = function() {
  return this.setIntLiteral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasIntLiteral = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Last last = 7;
 * @return {?proto.sonarsource.ucfg.Last}
 */
proto.sonarsource.ucfg.Expression.prototype.getLast = function() {
  return /** @type{?proto.sonarsource.ucfg.Last} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Last, 7));
};


/**
 * @param {?proto.sonarsource.ucfg.Last|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setLast = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearLast = function() {
  return this.setLast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasLast = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Iter iter = 8;
 * @return {?proto.sonarsource.ucfg.Iter}
 */
proto.sonarsource.ucfg.Expression.prototype.getIter = function() {
  return /** @type{?proto.sonarsource.ucfg.Iter} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Iter, 8));
};


/**
 * @param {?proto.sonarsource.ucfg.Iter|undefined} value
 * @return {!proto.sonarsource.ucfg.Expression} returns this
*/
proto.sonarsource.ucfg.Expression.prototype.setIter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.sonarsource.ucfg.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.Expression} returns this
 */
proto.sonarsource.ucfg.Expression.prototype.clearIter = function() {
  return this.setIter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.Expression.prototype.hasIter = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    declaredType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variadicArg: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Variable;
  return proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaredType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVariadicArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeclaredType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariadicArg();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.Variable} returns this
 */
proto.sonarsource.ucfg.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string declared_type = 2;
 * @return {string}
 */
proto.sonarsource.ucfg.Variable.prototype.getDeclaredType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.Variable} returns this
 */
proto.sonarsource.ucfg.Variable.prototype.setDeclaredType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool variadic_arg = 3;
 * @return {boolean}
 */
proto.sonarsource.ucfg.Variable.prototype.getVariadicArg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sonarsource.ucfg.Variable} returns this
 */
proto.sonarsource.ucfg.Variable.prototype.setVariadicArg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Constant.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Constant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Constant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Constant.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Constant}
 */
proto.sonarsource.ucfg.Constant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Constant;
  return proto.sonarsource.ucfg.Constant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Constant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Constant}
 */
proto.sonarsource.ucfg.Constant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Constant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Constant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Constant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Constant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.Constant.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.Constant} returns this
 */
proto.sonarsource.ucfg.Constant.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.IntLiteral.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.IntLiteral.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.IntLiteral} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.IntLiteral.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.IntLiteral}
 */
proto.sonarsource.ucfg.IntLiteral.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.IntLiteral;
  return proto.sonarsource.ucfg.IntLiteral.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.IntLiteral} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.IntLiteral}
 */
proto.sonarsource.ucfg.IntLiteral.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.IntLiteral.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.IntLiteral.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.IntLiteral} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.IntLiteral.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.sonarsource.ucfg.IntLiteral.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sonarsource.ucfg.IntLiteral} returns this
 */
proto.sonarsource.ucfg.IntLiteral.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Last.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Last.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Last} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Last.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Last}
 */
proto.sonarsource.ucfg.Last.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Last;
  return proto.sonarsource.ucfg.Last.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Last} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Last}
 */
proto.sonarsource.ucfg.Last.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Last.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Last.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Last} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Last.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Iter.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Iter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Iter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Iter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Iter}
 */
proto.sonarsource.ucfg.Iter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Iter;
  return proto.sonarsource.ucfg.Iter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Iter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Iter}
 */
proto.sonarsource.ucfg.Iter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Iter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Iter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Iter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Iter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.This.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.This.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.This} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.This.toObject = function(includeInstance, msg) {
  var f, obj = {
    declaredType: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.This}
 */
proto.sonarsource.ucfg.This.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.This;
  return proto.sonarsource.ucfg.This.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.This} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.This}
 */
proto.sonarsource.ucfg.This.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeclaredType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.This.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.This.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.This} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.This.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeclaredType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string declared_type = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.This.prototype.getDeclaredType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.This} returns this
 */
proto.sonarsource.ucfg.This.prototype.setDeclaredType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.ClassName.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.ClassName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.ClassName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.ClassName.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.ClassName}
 */
proto.sonarsource.ucfg.ClassName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.ClassName;
  return proto.sonarsource.ucfg.ClassName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.ClassName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.ClassName}
 */
proto.sonarsource.ucfg.ClassName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.ClassName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.ClassName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.ClassName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.ClassName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.ClassName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.ClassName} returns this
 */
proto.sonarsource.ucfg.ClassName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sonarsource.ucfg.FieldAccess.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.sonarsource.ucfg.FieldAccess.ExprObjCase = {
  EXPR_OBJ_NOT_SET: 0,
  OBJECT: 1,
  THIS: 2,
  CLASS_NAME: 3
};

/**
 * @return {proto.sonarsource.ucfg.FieldAccess.ExprObjCase}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.getExprObjCase = function() {
  return /** @type {proto.sonarsource.ucfg.FieldAccess.ExprObjCase} */(jspb.Message.computeOneofCase(this, proto.sonarsource.ucfg.FieldAccess.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.FieldAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.FieldAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.FieldAccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: (f = msg.getObject()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f),
    pb_this: (f = msg.getThis()) && proto.sonarsource.ucfg.This.toObject(includeInstance, f),
    className: (f = msg.getClassName()) && proto.sonarsource.ucfg.ClassName.toObject(includeInstance, f),
    field: (f = msg.getField()) && proto.sonarsource.ucfg.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.FieldAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.FieldAccess;
  return proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.FieldAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.FieldAccess}
 */
proto.sonarsource.ucfg.FieldAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 2:
      var value = new proto.sonarsource.ucfg.This;
      reader.readMessage(value,proto.sonarsource.ucfg.This.deserializeBinaryFromReader);
      msg.setThis(value);
      break;
    case 3:
      var value = new proto.sonarsource.ucfg.ClassName;
      reader.readMessage(value,proto.sonarsource.ucfg.ClassName.deserializeBinaryFromReader);
      msg.setClassName(value);
      break;
    case 4:
      var value = new proto.sonarsource.ucfg.Variable;
      reader.readMessage(value,proto.sonarsource.ucfg.Variable.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.FieldAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.FieldAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
  f = message.getThis();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sonarsource.ucfg.This.serializeBinaryToWriter
    );
  }
  f = message.getClassName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sonarsource.ucfg.ClassName.serializeBinaryToWriter
    );
  }
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sonarsource.ucfg.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable object = 1;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.getObject = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 1));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
*/
proto.sonarsource.ucfg.FieldAccess.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sonarsource.ucfg.FieldAccess.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
 */
proto.sonarsource.ucfg.FieldAccess.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.hasObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional This this = 2;
 * @return {?proto.sonarsource.ucfg.This}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.getThis = function() {
  return /** @type{?proto.sonarsource.ucfg.This} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.This, 2));
};


/**
 * @param {?proto.sonarsource.ucfg.This|undefined} value
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
*/
proto.sonarsource.ucfg.FieldAccess.prototype.setThis = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sonarsource.ucfg.FieldAccess.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
 */
proto.sonarsource.ucfg.FieldAccess.prototype.clearThis = function() {
  return this.setThis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.hasThis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClassName class_name = 3;
 * @return {?proto.sonarsource.ucfg.ClassName}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.getClassName = function() {
  return /** @type{?proto.sonarsource.ucfg.ClassName} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.ClassName, 3));
};


/**
 * @param {?proto.sonarsource.ucfg.ClassName|undefined} value
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
*/
proto.sonarsource.ucfg.FieldAccess.prototype.setClassName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sonarsource.ucfg.FieldAccess.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
 */
proto.sonarsource.ucfg.FieldAccess.prototype.clearClassName = function() {
  return this.setClassName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.hasClassName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Variable field = 4;
 * @return {?proto.sonarsource.ucfg.Variable}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.getField = function() {
  return /** @type{?proto.sonarsource.ucfg.Variable} */ (
    jspb.Message.getWrapperField(this, proto.sonarsource.ucfg.Variable, 4));
};


/**
 * @param {?proto.sonarsource.ucfg.Variable|undefined} value
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
*/
proto.sonarsource.ucfg.FieldAccess.prototype.setField = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sonarsource.ucfg.FieldAccess} returns this
 */
proto.sonarsource.ucfg.FieldAccess.prototype.clearField = function() {
  return this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sonarsource.ucfg.FieldAccess.prototype.hasField = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sonarsource.ucfg.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.sonarsource.ucfg.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sonarsource.ucfg.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startLine: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startLineOffset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endLine: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endLineOffset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sonarsource.ucfg.Location;
  return proto.sonarsource.ucfg.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sonarsource.ucfg.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sonarsource.ucfg.Location}
 */
proto.sonarsource.ucfg.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartLine(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartLineOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndLine(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndLineOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sonarsource.ucfg.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sonarsource.ucfg.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sonarsource.ucfg.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sonarsource.ucfg.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartLine();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartLineOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndLine();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEndLineOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string file_id = 1;
 * @return {string}
 */
proto.sonarsource.ucfg.Location.prototype.getFileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sonarsource.ucfg.Location} returns this
 */
proto.sonarsource.ucfg.Location.prototype.setFileId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start_line = 2;
 * @return {number}
 */
proto.sonarsource.ucfg.Location.prototype.getStartLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sonarsource.ucfg.Location} returns this
 */
proto.sonarsource.ucfg.Location.prototype.setStartLine = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 start_line_offset = 3;
 * @return {number}
 */
proto.sonarsource.ucfg.Location.prototype.getStartLineOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sonarsource.ucfg.Location} returns this
 */
proto.sonarsource.ucfg.Location.prototype.setStartLineOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end_line = 4;
 * @return {number}
 */
proto.sonarsource.ucfg.Location.prototype.getEndLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sonarsource.ucfg.Location} returns this
 */
proto.sonarsource.ucfg.Location.prototype.setEndLine = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 end_line_offset = 5;
 * @return {number}
 */
proto.sonarsource.ucfg.Location.prototype.getEndLineOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sonarsource.ucfg.Location} returns this
 */
proto.sonarsource.ucfg.Location.prototype.setEndLineOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.sonarsource.ucfg);
